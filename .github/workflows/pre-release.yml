name: Pre-release

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  create-pre-release:
    runs-on: ubuntu-latest
    name: Build and push Docker image and create a new GitHub pre-release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Only fetch the latest commit

      - name: Set environment variables
        run: |
          echo VERSION=$(cat VERSION).$GITHUB_RUN_NUMBER >> $GITHUB_ENV
          echo BASE_IMAGE_NAME=$REGISTRY/$(echo ${GITHUB_REPOSITORY,,}) >> $GITHUB_ENV
          echo COMMITED_AT=$(git show -s --format=%cI `git rev-parse HEAD`) >> $GITHUB_ENV

      - name: Debug what's taking up space
        run: |
          echo "=== CURRENT DIRECTORY SIZE ==="
          du -sh .
          echo ""
          echo "=== TOP 10 LARGEST FILES/FOLDERS ==="
          du -sh * .* 2>/dev/null | sort -hr | head -20
          echo ""
          echo "=== .git FOLDER SIZE ==="
          if [ -d ".git" ]; then
            du -sh .git
            echo "Contents of .git:"
            du -sh .git/* 2>/dev/null | sort -hr | head -10
          else
            echo ".git folder not found"
          fi
          echo ""
          echo "=== BUILD CONTEXT SIZE ==="
          if [ -d "/tmp/build-context" ]; then
            du -sh /tmp/build-context
            echo "Contents of build context:"
            du -sh /tmp/build-context/* 2>/dev/null | sort -hr | head -10
          fi
          echo ""
          echo "=== LARGE FILES (>100MB) ==="
          find . -type f -size +100M -exec ls -lh {} \; 2>/dev/null | head -10

      - name: Collect Docker image metadata (api)
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BASE_IMAGE_NAME }}-api
          labels: |
            org.opencontainers.image.created=${{ env.COMMITED_AT }}
            org.opencontainers.image.version=v${{ env.VERSION }}
            org.opencontainers.image.authors=Stijn Vermeeren <stijn.vermeeren@swisstopo.ch>
          flavor: |
            latest=false
          tags: |
            type=edge
            type=semver,pattern=v{{version}},value=${{ env.VERSION }}

      - name: Log in to the GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner  }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create clean build context
        run: |
          mkdir -p /tmp/build-context
          rsync -av --exclude='.git' --exclude='.github' . /tmp/build-context/
      - name: Build and push Docker image (api)
        uses: docker/build-push-action@v5
        with:
          context: /tmp/build-context 
          push: true
          build-args: |
            VERSION=${{ env.VERSION }}
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=registry,ref=${{ env.BASE_IMAGE_NAME }}-api:edge
          cache-to: type=inline

      - name: Create GitHub pre-release
        run: |
          gh api \
            --method POST \
            --header "Accept: application/vnd.github+json" \
            /repos/${GITHUB_REPOSITORY}/releases \
            -f tag_name='v${{ env.VERSION }}' \
            -f target_commitish='main' \
            -f name='${{ env.VERSION }}' \
            -F prerelease=true \